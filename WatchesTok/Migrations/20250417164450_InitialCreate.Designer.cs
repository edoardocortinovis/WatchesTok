// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WatchesTok.Data;

#nullable disable

namespace WatchesTok.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250417164450_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.36");

            modelBuilder.Entity("WatchesTok.Models.Commenti", b =>
                {
                    b.Property<int>("CommentiID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("PostId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UtenteId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CommentiID");

                    b.HasIndex("PostId");

                    b.HasIndex("UtenteId");

                    b.ToTable("EleCommenti");
                });

            modelBuilder.Entity("WatchesTok.Models.Like", b =>
                {
                    b.Property<int>("LikeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DataCreazione")
                        .HasColumnType("TEXT");

                    b.Property<int>("PostID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UtenteID")
                        .HasColumnType("INTEGER");

                    b.HasKey("LikeID");

                    b.HasIndex("PostID");

                    b.HasIndex("UtenteID");

                    b.ToTable("EleLikes");
                });

            modelBuilder.Entity("WatchesTok.Models.Orologio", b =>
                {
                    b.Property<int>("OrologioID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AnnoProduzione")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Categoria")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataCreazione")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descrizione")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("ImmagineURL")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Modello")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Prezzo")
                        .HasColumnType("TEXT");

                    b.HasKey("OrologioID");

                    b.ToTable("EleOrologi");
                });

            modelBuilder.Entity("WatchesTok.Models.Post", b =>
                {
                    b.Property<int>("PostID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DataCreazione")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descrizione")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Hashtags")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("MarcaModello")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("MediaPath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int?>("OrologioID")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Titolo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("UtenteID")
                        .HasColumnType("INTEGER");

                    b.HasKey("PostID");

                    b.HasIndex("OrologioID");

                    b.HasIndex("UtenteID");

                    b.ToTable("ElePost");
                });

            modelBuilder.Entity("WatchesTok.Models.Utente", b =>
                {
                    b.Property<int>("UtenteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Cognome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UtenteID");

                    b.ToTable("EleUtenti");
                });

            modelBuilder.Entity("WatchesTok.Models.Commenti", b =>
                {
                    b.HasOne("WatchesTok.Models.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WatchesTok.Models.Utente", "Utente")
                        .WithMany()
                        .HasForeignKey("UtenteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("Utente");
                });

            modelBuilder.Entity("WatchesTok.Models.Like", b =>
                {
                    b.HasOne("WatchesTok.Models.Post", "Post")
                        .WithMany("Likes")
                        .HasForeignKey("PostID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WatchesTok.Models.Utente", "Utente")
                        .WithMany()
                        .HasForeignKey("UtenteID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("Utente");
                });

            modelBuilder.Entity("WatchesTok.Models.Post", b =>
                {
                    b.HasOne("WatchesTok.Models.Orologio", "Orologio")
                        .WithMany("Posts")
                        .HasForeignKey("OrologioID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WatchesTok.Models.Utente", "Utente")
                        .WithMany()
                        .HasForeignKey("UtenteID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Orologio");

                    b.Navigation("Utente");
                });

            modelBuilder.Entity("WatchesTok.Models.Orologio", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("WatchesTok.Models.Post", b =>
                {
                    b.Navigation("Likes");
                });
#pragma warning restore 612, 618
        }
    }
}
